" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif




"******说明：配置一般有两个选项 打开和关闭，关闭为设置参数前加"no"，如set nonumber，



"*****基本配置

"行号
set number  

"语法高亮
syntax on

"底部显示当前模式（插入）
set showmode

"命令模式下，底部显示当前输入的指令，默认不显示
set showcmd 

"支持使用鼠标
"set mouse=a 
   
"启用256色   
set t_Co=256

"使用 utf-8 编码
"set encoding=utf-8



"*****缩进（tab键相关）

"按tab自动保持与上一行一致
set autoindent
"set cindent

"按tab时vim显示的空格数
set tabstop=4

"tab转为空格
set expandtab

"tab转为多少个空格
set softtabstop=4



"*****外观

"光标所在行高亮
"set cursorline



"*****搜索

"遇到括号自动高亮对应的括号
set showmatch

"高亮显示匹配结果
set hlsearch

"搜索时，每输入一个字符，就自动调到第一个匹配的结果
set incsearch


"*****vim
set nocompatible

"""""文件类型*.c自动添加内容
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()"

""定义函数SetTitle，自动插入文件头
func SetTitle()
    "如果文件类型为.sh文件
     call setline(1, "/*************************************************************************")
    call append(line("."), "    > File Name: ".expand("%"))
    call append(line(".")+1, "    > Author: darkcell-yao")
    call append(line(".")+2, "    > Mail: 2287884586@qq.com ")
    call append(line(".")+3, "    > Created Time: ".strftime("%c"))
    call append(line(".")+4, " ************************************************************************/")
    call append(line(".")+5, "")

    if &filetype == 'c' 
        call append(line(".")+6, "#include<stdio.h>")
        call append(line(".")+7, "")
        call append(line(".")+8, "int main()")
        call append(line(".")+9, "{")
        call append(line(".")+10, "")
        call append(line(".")+11, "     return 0")
        call append(line(".")+12, "}")
    elseif &filetype == 'h'
            call append(line(".")+6, "#ifndef _EXAMPLE_H_l")
            call append(line(".")+7, "#define _EXAMPLE_H_l")
            call append(line(".")+8, "")
            call append(line(".")+9, "")
            call append(line(".")+10, "")
            call append(line(".")+11, "")
            call append(line(".")+12, "")
            call append(line(".")+13, "#endif")
    endif
endfunc
